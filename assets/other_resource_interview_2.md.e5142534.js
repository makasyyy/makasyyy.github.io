import{_ as l,c as i,o as e,d as a}from"./app.c5ba338d.js";const g=JSON.parse('{"title":"前端性能优化","description":"","frontmatter":{},"headers":[{"level":2,"title":"怎么测量 谷歌-火焰图，官方lighthouse web page test","slug":"怎么测量-谷歌-火焰图-官方lighthouse-web-page-test","link":"#怎么测量-谷歌-火焰图-官方lighthouse-web-page-test","children":[]},{"level":2,"title":"1.图片优化","slug":"_1-图片优化","link":"#_1-图片优化","children":[]},{"level":2,"title":"2.html代码优化-影响不大","slug":"_2-html代码优化-影响不大","link":"#_2-html代码优化-影响不大","children":[]},{"level":2,"title":"3.css代码优化-影响不大","slug":"_3-css代码优化-影响不大","link":"#_3-css代码优化-影响不大","children":[]},{"level":2,"title":"4.字体文件优化-不咋用","slug":"_4-字体文件优化-不咋用","link":"#_4-字体文件优化-不咋用","children":[]},{"level":2,"title":"5.js代码优化","slug":"_5-js代码优化","link":"#_5-js代码优化","children":[]},{"level":2,"title":"6.webpack打包优化-重要且常见","slug":"_6-webpack打包优化-重要且常见","link":"#_6-webpack打包优化-重要且常见","children":[]},{"level":2,"title":"7. 页面静态化(SSR)","slug":"_7-页面静态化-ssr","link":"#_7-页面静态化-ssr","children":[]},{"level":2,"title":"8. 页面加载策略优化","slug":"_8-页面加载策略优化","link":"#_8-页面加载策略优化","children":[]},{"level":2,"title":"9. 接口优化","slug":"_9-接口优化","link":"#_9-接口优化","children":[]},{"level":2,"title":"10.webview性能优化-常见面试题 -hybrid app","slug":"_10-webview性能优化-常见面试题-hybrid-app","link":"#_10-webview性能优化-常见面试题-hybrid-app","children":[]},{"level":2,"title":"11.html5离线化","slug":"_11-html5离线化","link":"#_11-html5离线化","children":[]},{"level":2,"title":"12.浏览器缓存优化","slug":"_12-浏览器缓存优化","link":"#_12-浏览器缓存优化","children":[]},{"level":2,"title":"13.如何配置cdn缓存","slug":"_13-如何配置cdn缓存","link":"#_13-如何配置cdn缓存","children":[]},{"level":2,"title":"14.dns优化","slug":"_14-dns优化","link":"#_14-dns优化","children":[]}],"relativePath":"other/resource/interview_2.md","lastUpdated":1681057630000}'),r={name:"other/resource/interview_2.md"},t=a('<h1 id="前端性能优化" tabindex="-1">前端性能优化 <a class="header-anchor" href="#前端性能优化" aria-hidden="true">#</a></h1><h2 id="怎么测量-谷歌-火焰图-官方lighthouse-web-page-test" tabindex="-1">怎么测量 谷歌-火焰图，官方lighthouse web page test <a class="header-anchor" href="#怎么测量-谷歌-火焰图-官方lighthouse-web-page-test" aria-hidden="true">#</a></h2><h2 id="_1-图片优化" tabindex="-1">1.图片优化 <a class="header-anchor" href="#_1-图片优化" aria-hidden="true">#</a></h2><ol><li>选择合适的图片格式</li><li>压缩图片 png-node-pngquant-native 压缩jpg-jpegtron 压缩gif-gifsicle</li><li>图片优化方案 <ol><li>使用iconfont</li><li>使用base64-webpack自带的包可以配置-一般都是后端转</li><li>使用雪碧图</li><li>使用cdn图片-这个要看一下，肯定要上，为了效果</li><li>懒加载</li><li>预加载</li><li>渐进式图片-刚开始只加载一个像素比较模糊的图片（体积比较小的）</li></ol></li></ol><h2 id="_2-html代码优化-影响不大" tabindex="-1">2.html代码优化-影响不大 <a class="header-anchor" href="#_2-html代码优化-影响不大" aria-hidden="true">#</a></h2><ol><li>前端html代码</li><li>文件放在合适位置</li></ol><h2 id="_3-css代码优化-影响不大" tabindex="-1">3.css代码优化-影响不大 <a class="header-anchor" href="#_3-css代码优化-影响不大" aria-hidden="true">#</a></h2><ol><li>提交文件加载性能-使用外链 尽量避免使用@import,可能会造成白屏，影响css文件的加载速度</li><li>精简css代码 <ol><li>利用css继承减少代码量</li><li>避免使用复杂的选择器，层级越少越好</li></ol></li></ol><h2 id="_4-字体文件优化-不咋用" tabindex="-1">4.字体文件优化-不咋用 <a class="header-anchor" href="#_4-字体文件优化-不咋用" aria-hidden="true">#</a></h2><ol><li>cdn加载字体文件</li><li>gzip压缩字体文件</li><li>通过font-display-调整加载顺序</li><li>字体裁剪，删除不需要的</li><li>内联字体</li></ol><h2 id="_5-js代码优化" tabindex="-1">5.js代码优化 <a class="header-anchor" href="#_5-js代码优化" aria-hidden="true">#</a></h2><h2 id="_6-webpack打包优化-重要且常见" tabindex="-1">6.webpack打包优化-重要且常见 <a class="header-anchor" href="#_6-webpack打包优化-重要且常见" aria-hidden="true">#</a></h2><ol><li>优化构建速度-第一次启动到打开网页，7.8秒以上肯定要优化 <ol><li>升级新版本</li><li>优化搜索文件 <ol><li>缩小文件的搜索范围： <ol><li>合理使用resolve功能，resolve.alias.resolve.extensions,resolve.modules等</li><li>配置loader时，使用test，exclude，include缩小搜索范围</li></ol></li><li>对匹配的文件进行分析，转化： <ol><li>module.noParse,告诉webpack不必解析哪些文件，可以用来排除对非模块化库文件的解析</li></ol></li><li>DllPlugin和DllReferencePlugin避免重复编译第三方库-比如lodash-react-dom</li><li>使用HappyPack开启多进程Loader转换 <ol><li>loader对文件的转换操作太耗时，js是单线程模型，只能一个一个文件进行处理，需要通过</li><li>happypack将任务分解成多个子进程，最后将结果发给主进程，并行处理</li></ol></li><li>使用ParallelUglifyPlugin开启多进程压缩js文件 <ol><li>它可以开启多个子进程，每个子进程使用UglifyJS压缩代码，可以并行执行，能显著压缩时间</li></ol></li></ol></li></ol></li><li>优化开发体验-开启模块热替换HMR-只重新编译发生改变的模块</li><li>优化输出质量-压缩文件体积 <ol><li>通过DEfinePlugin区分环境，减少生产环境代码体积</li><li>压缩资源 js/css/图片</li><li>tree shaking-删除js无用代码-分析import/exports依赖关系，对于没有用的，会自动删除</li><li>分离第三方库文件-通过externals，将第三方库使用cdn加载，而不是打包到bundle中-缺点：组件库按需加载能力无法支持，不会有treeshaking。通过SplitChunksPlugin</li><li>gzip压缩-compression-webpack-plugin</li></ol></li></ol><h2 id="_7-页面静态化-ssr" tabindex="-1">7. 页面静态化(SSR) <a class="header-anchor" href="#_7-页面静态化-ssr" aria-hidden="true">#</a></h2><ol><li>为什么？ <ol><li>提高页面访问速度，降低服务器负担，因为访问时不需要每次去访问数据库</li><li>单页面应用的seo不好</li><li>页面稳定性-如果后端接口出现问题，页面还会有缓存，不会出问题</li></ol></li><li>有啥问题 <ol><li>服务器存储占用问题，因为页面量级增加，要占用更大硬盘控件</li><li>静态页面中的链接更新问题会有死链接或错误链接问题-解决方案：利用模板字符串，进行动态替换</li></ol></li><li>使用场景 <ol><li>首屏优化</li></ol></li></ol><h2 id="_8-页面加载策略优化" tabindex="-1">8. 页面加载策略优化 <a class="header-anchor" href="#_8-页面加载策略优化" aria-hidden="true">#</a></h2><ol><li>网络请求优化：减少网络资源的请求和加载耗时 <ol><li>预加载 <ol><li>preload-提前下载资源</li><li>prefetch-跟preload都是提前下载，有区别</li><li>dns-prefetch-预解析</li><li>preconnect-跟3很像，还会建立tcp握手连接和tls协议</li></ol></li><li>开启gzip</li><li>cdn</li><li>预渲染</li><li>使用http/2，http/3提升资源请求速度</li><li>资源请求合并，减少http请求</li><li>合理使用defer，async</li></ol></li><li>首屏加载优化 <ol><li>对页面内容进行分片/分屏加载</li><li>懒加载- 监听scroll事件/使用IntersectionObserver</li><li>楼层式记载-京东首页-存到localstorage？？？ <ol><li>楼层数据异步加载和本地缓存相结合的方式</li><li>在页面上放md5值，用来判断是使用接口数据还是缓存数据。进入页面后，将数据请求回来后，进行缓存，对楼层分别判断是使用接口数据还是缓存数据</li></ol></li><li>首屏只加载需要的资源，对于不需要的资源不加载</li><li>ssr--首屏终极方案-但是改造比较大，有的公司没用</li><li>客户端离线包方案-这个方案也非常好</li><li>客户端进行预请求和预记载</li></ol></li><li>渲染过程优化：减少用户操作等待时间 <ol><li>按需加载</li><li>减少回流和重绘</li><li>减少/合并dom操作，减少浏览器的计算损耗</li></ol></li><li>浏览器运算逻辑优化 <ol><li>拆解长任务，避免出现长时间计算导致页面卡顿</li><li>提前将计算结果缓存</li></ol></li><li>关键渲染路径优化 <ol><li>浏览器将html，css，js转换为屏幕上呈现的实际像素这一期间所经历的一系列步骤</li><li>css的link标签放在head之间</li><li>script标签放在&#39;&lt; body &gt;&#39;之前</li></ol></li></ol><h2 id="_9-接口优化" tabindex="-1">9. 接口优化 <a class="header-anchor" href="#_9-接口优化" aria-hidden="true">#</a></h2><h2 id="_10-webview性能优化-常见面试题-hybrid-app" tabindex="-1">10.webview性能优化-常见面试题 -hybrid app <a class="header-anchor" href="#_10-webview性能优化-常见面试题-hybrid-app" aria-hidden="true">#</a></h2><h2 id="_11-html5离线化" tabindex="-1">11.html5离线化 <a class="header-anchor" href="#_11-html5离线化" aria-hidden="true">#</a></h2><h2 id="_12-浏览器缓存优化" tabindex="-1">12.浏览器缓存优化 <a class="header-anchor" href="#_12-浏览器缓存优化" aria-hidden="true">#</a></h2><h2 id="_13-如何配置cdn缓存" tabindex="-1">13.如何配置cdn缓存 <a class="header-anchor" href="#_13-如何配置cdn缓存" aria-hidden="true">#</a></h2><h2 id="_14-dns优化" tabindex="-1">14.dns优化 <a class="header-anchor" href="#_14-dns优化" aria-hidden="true">#</a></h2>',23),s=[t];function h(d,n,o,c,_,p){return e(),i("div",null,s)}const b=l(r,[["render",h]]);export{g as __pageData,b as default};
